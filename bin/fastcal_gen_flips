#!/bin/bash
# rawdata-tools - A set of tools for rawdata processing
#
# Copyright (c) 2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script parameters #
PARAM_MOUNT="/data/"
PARAM_MAC=""
PARAM_PRINT="0"

# Function to show help
function showHelp {
    echo "Usage: $(basename $0) [OPTIONS]"
    echo -e "\n\t[Required arguments]"
    echo -e "\t--mount-point        Base mount directory"
    echo -e "\t--mac-address        Camera MAC address\n"
    echo -e "\t[Optional arguments]"
    echo -e "\t--print             Output results to stdout"
    echo -e "\t--help              Show this message\n"
}

# Arguments and parameters parser #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --mount-point)
                PARAM_MOUNT="$1"
                shift
            ;;
            --mac-address)
                PARAM_MAC="$1"
                shift
            ;;
            --print)
                PARAM_PRINT="1"
                shift
            ;;
            --help)
                showHelp
                exit
            ;;
        esac

    done

}

# Argument and parameters #
arguments $@

# Check execution consistency #
if [ ! -d $PARAM_MOUNT/camera ] || [ ! -d $PARAM_MOUNT/rawdata ] || [ ! -d $PARAM_MOUNT/system ]; then

    # Exit script #
    echo "Error : unable to access standard directory with specified mount point"
    exit 1

fi

# FUnction to display or write a content to a file
function display {

    # Parse parameters
    FILE="$1"
    PRINTFLAG="$2"

    # Read stdin
    while read data; do

        # Check for print flag
        if [ $PRINTFLAG -eq 1 ]; then

            # Display data
            echo $data
        else

            # Write data to file
            echo $data >> $FILE
        fi
    done
}

# Check arguments presence
if [ $# -eq 0 ]; then
    showHelp
else

    # Check if jp4-info tool is installed on the system
    if ! which jp4-info >/dev/null; then
        echo "jp4-info not found, please visit http://sourceforge.net/p/elphel/jp4-tools/ci/master/tree/ for more informations."
        exit
    fi

    # Determine output file
    FASTCAL_FILE="$PARAM_MOUNT/camera/$PARAM_MAC/fastcal/calibration.key"

    # Check if flips are already generated
    if grep -q "hflip" "$FASTCAL_FILE"; then
        if [ $PARAM_PRINT -eq 0 ]; then
            echo "Flips already generated for camera $PARAM_MAC"
            exit
        fi
    fi

    # Camera modules config
    MODULES_COUNT=9
    IMAGES_PER_MODULE=3

    # Find a folder containing JP4 files in structure
    MASTERS_DIR="$PARAM_MOUNT/rawdata/$PARAM_MAC/master"
    MASTERS=$(ls $MASTERS_DIR)
    SEGMENTS_DIR="$MASTERS_DIR/$(echo $MASTERS | cut -d' ' -f1 )/segment"
    SEGMENTS=$(ls $SEGMENTS_DIR)
    RAW_DIR="$SEGMENTS_DIR/$(echo $SEGMENTS | cut -d' ' -f1 )/raw"
    RAWS=$(ls $RAW_DIR)
    JP4_DIR="$RAW_DIR/$(echo $RAWS | cut -d' ' -f1 )"

    # Module increment counter
    INC=0

    # Iterate over JP4 files
    ( for f in $JP4_DIR/*.jp4
    do
        # Get JP4 infos
        INFO_OUT="$(jp4-info $f)"

        # Get vertical flip parameters
        FLIP_STR_V1=$(echo "$INFO_OUT" | grep flip_v1 | cut -d' ' -f2)
        FLIP_STR_V2=$(echo "$INFO_OUT" | grep flip_v2 | cut -d' ' -f2)
        FLIP_STR_V3=$(echo "$INFO_OUT" | grep flip_v3 | cut -d' ' -f2)

        # Get horizontal flip parameters
        FLOP_STR_V1=$(echo "$INFO_OUT" | grep flip_h1 | cut -d' ' -f2)
        FLOP_STR_V2=$(echo "$INFO_OUT" | grep flip_h2 | cut -d' ' -f2)
        FLOP_STR_V3=$(echo "$INFO_OUT" | grep flip_h3 | cut -d' ' -f2)

        # Clamp variable to 1 as maximum value
        if [ $FLIP_STR_V1 -gt 1 ]; then
            FLIP_STR_V1=1
        fi

        # Clamp vertical flip 2 to 1 as maximum value
        if [ $FLIP_STR_V2 -gt 1 ]; then
            FLIP_STR_V2=1
        fi

        # Clamp vertical flip 3 to 1 as maximum value
        if [ $FLIP_STR_V3 -gt 1 ]; then
            FLIP_STR_V3=1
        fi

        # Clamp horizontal flip 1 to 1 as maximum value
        if [ $FLOP_STR_V1 -gt 1 ]; then
            FLOP_STR_V1=1
        fi

        # Clamp horizontal flip 2 to 1 as maximum value
        if [ $FLOP_STR_V2 -gt 1 ]; then
            FLOP_STR_V2=1
        fi

        # Clamp horizontal flip 3 to 1 as maximum value
        if [ $FLOP_STR_V3 -gt 1 ]; then
            FLOP_STR_V3=1
        fi

        # Check if module counter is less than 8
        if [ $INC -lt $((MODULES_COUNT - 1)) ]; then

            # Build vertical flip key/values
            echo "vflip_$( printf "%02d\n" $INC )=$FLIP_STR_V1"
            echo "vflip_$( printf "%02d\n" $((INC + (MODULES_COUNT - 1))) )=$FLIP_STR_V2"
            echo "vflip_$( printf "%02d\n" $((INC + ((MODULES_COUNT - 1) * 2))) )=$FLIP_STR_V3"

            # Build horizontal flip key/values
            echo "hflip_$( printf "%02d\n" $INC )=$FLOP_STR_V1"
            echo "hflip_$( printf "%02d\n" $((INC + (MODULES_COUNT - 1))) )=$FLOP_STR_V2"
            echo "hflip_$( printf "%02d\n" $((INC + ((MODULES_COUNT - 1) * 2))) )=$FLOP_STR_V3"
        else

            # Compute last modules index
            LAST_CNT_1=$(((MODULES_COUNT * IMAGES_PER_MODULE) - 3))
            LAST_CNT_2=$(((MODULES_COUNT * IMAGES_PER_MODULE) - 2))

            # Build vertical flip key/values for module 24 and 25
            echo "vflip_$LAST_CNT_1=$FLIP_STR_V1"
            echo "vflip_$LAST_CNT_2=$FLIP_STR_V2"

            # Build horizontal flip key/values for module 24 and 25
            echo "hflip_$LAST_CNT_1=$FLOP_STR_V1"
            echo "hflip_$LAST_CNT_2=$FLOP_STR_V2"

            # Exit script
            exit
        fi

        # Increment module counter
        INC=$((INC + 1))
    done ) | sort -u | display $FASTCAL_FILE $PARAM_PRINT

    echo "Flips successfully generated for camera $PARAM_MAC"
fi
